#!/usr/bin/env python3

import logging
import json
import os
import subprocess
import argparse

args = argparse.ArgumentParser(description="Run tests for PONS-dtn examples.")
args.add_argument(
    "--test_file",
    type=str,
    default="tests.json",
    help="Path to the JSON file containing test scripts.",
)
args.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output.")
args.add_argument(
    "-H", "--halt-on-error", action="store_true", help="Halt on first error."
)
args.add_argument(
    "-n",
    "--only-run-single-test",
    type=int,
    help="Run only a single test by index (first entry has index 0) in test file.",
)
args = args.parse_args()
if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

logger = logging.getLogger(__name__)


def run_tests(test_file):
    if not os.path.exists(test_file):
        logger.error(f"Test file {test_file} does not exist.")
        return

    with open(test_file, "r") as f:
        tests = json.load(f)

    logger.debug(f"Loaded tests: {tests}")

    total_failed_tests = 0
    tests_run_so_far = 0

    for idx, test in enumerate(tests):
        if args.only_run_single_test is not None and idx != args.only_run_single_test:
            logger.debug(f"Skipping test {idx} as only single test is requested.")
            continue
        tests_run_so_far += 1
        test_path = test["file"]
        if not os.path.exists(test_path):
            logger.error(f"Test #{idx}, script {test} does not exist.")
            if args.halt_on_error:
                break
            else:
                logger.warning(f"Skipping missing test script: {test_path}")
            continue

        logger.info(f"Running test: {test}")
        result = ""
        try:
            result = subprocess.check_output(
                ["python3", test_path], stderr=subprocess.STDOUT
            ).decode()

        except Exception as e:
            logger.error(f"Test #{idx} '{test['file']} failed: {e}")
            logger.debug(
                f"Output: {e.output.decode() if hasattr(e, 'output') else str(e)}"
            )
            total_failed_tests += 1
            if args.halt_on_error:
                break

        failed = 0
        if "results" in test and len(test["results"]) > 0:
            expected_results = test["results"]
            for condition in expected_results:
                logger.debug(f"Checking condition: {condition}")
                if isinstance(condition, str):
                    regex = condition
                    logger.debug(f"Looking for regex: '{regex}'")
                    if regex not in result:
                        logger.error(
                            f" Test {test['file']} failed: Expected '{regex}' not found in output."
                        )
                        failed += 1
                        if args.halt_on_error:
                            break
                        else:
                            continue
                elif isinstance(condition, dict):
                    for keyword, value in condition.items():
                        regex = f'"{keyword}": {value}'
                        logger.debug(f"Looking for regex: '{regex}'")
                        if regex not in result:
                            logger.error(
                                f" Test {test['file']} failed: Expected '{regex}' not found in output."
                            )
                            failed += 1
                            if args.halt_on_error:
                                break
                            else:
                                continue

        if failed > 0:
            logger.error(
                f"Test #{idx} '{test['file']} failed with {failed} conditions not met."
            )
            total_failed_tests += failed
            if args.halt_on_error:
                break
        else:
            logger.info(f"Test #{idx} {test['file']} completed successfully")
        logger.debug(f"Test output: {result}")
    logger.info(f"Tests successful: {tests_run_so_far-total_failed_tests}")
    logger.info(f"Total failed tests: {total_failed_tests} / {tests_run_so_far}")


def main():
    run_tests(args.test_file)


if __name__ == "__main__":
    main()
